#
#  Pocket SDR Python Library - GNSS Spreading Code Functions
#
#  References:
#  [1] IS-GPS-200K, NAVSTAR GPS Space Segment/Navigation User Segment
#      Interfaces, May 19, 2019
#  [2] IS-GPS-705A, Navstar GPS Space Segment / User Segment L5 Interfaces,
#      June 8, 2010
#  [3] IS-QZSS-PNT-004, Quasi-Zenith Satellite System Interfacec Specification
#      Satellite Positioning, Navigation and Timing Service, Novmenber 5, 2018
#  [4] IS-QZSS-L6-001, Quasi-Zenith Satellite System Interfacec Specification
#      Centimeter Level Augmentation Service, November 5, 2018
#  [5] Galileo Open Service Signal In Space Interface Control Document -
#      Issue 1, February 2010
#  [6] Galileo E6-B/C Codes Technical Note - Issue 1, January 2019
#  [7] IS-GPS-800F, Navstar GPS Space Segment / User Segment L1C Interfaces,
#      March 4, 2019
#
#  Author:
#  T.TAKASU
#
#  History:
#  2021-12-01  1.0  new
#
import numpy as np
import sdr_code_gal

# code caches ------------------------------------------------------------------
L1CA       = {}
L1CP, L1CD = {}, {}
L2CM       = {}
L5I , L5Q  = {}, {}
L6D,  L6E  = {}, {}
E1B , E1C  = {}, {}
E5AI, E5AQ = {}, {}
E5BI, E5BQ = {}, {}
E6B , E6C  = {}, {}

L1CA_G1, L1CA_G2 = [], []
L_SEQ = []
L5_XA, L5_XB = [], []

# code tables ------------------------------------------------------------------
L1CA_G2_delay = [ # PRN 1 - 210
       5,   6,   7,   8,  17,  18, 139, 140, 141, 251, 252, 254, 255, 256, 257,
     258, 469, 470, 471, 472, 473, 474, 509, 512, 513, 514, 515, 516, 859, 860,
     861, 862, 863, 950, 947, 948, 950,  67, 103,  91,  19, 679, 225, 625, 946,
     638, 161,1001, 554, 280, 710, 709, 775, 864, 558, 220, 397,  55, 898, 759,
     367, 299,1018, 729, 695, 780, 801, 788, 732,  34, 320, 327, 389, 407, 525,
     405, 221, 761, 260, 326, 955, 653, 699, 422, 188, 438, 959, 539, 879, 677,
     586, 153, 792, 814, 446, 264,1015, 278, 536, 819, 156, 957, 159, 712, 885,
     461, 248, 713, 126, 807, 279, 122, 197, 693, 632, 771, 467, 647, 203, 145,
     175,  52,  21, 237, 235, 886, 657, 634, 762, 355,1012, 176, 603, 130, 359,
     595,  68, 386, 797, 456, 499, 883, 307, 127, 211, 121, 118, 163, 628, 853,
     484, 289, 811, 202,1021, 463, 568, 904, 670, 230, 911, 684, 309, 644, 932,
      12, 314, 891, 212, 185, 675, 503, 150, 395, 345, 846, 798, 992, 357, 995,
     877, 112, 144, 476, 193, 109, 445, 291,  87, 399, 292, 901, 339, 208, 711,
     189, 263, 537, 663, 942, 173, 900,  30, 500, 935, 556, 373,  85, 652, 310]

L1CP_weil_idx = [ # PRN 1 - 210
    5111, 5109, 5108, 5106, 5103, 5101, 5100, 5098, 5095, 5094, 5093, 5091,
    5090, 5081, 5080, 5069, 5068, 5054, 5044, 5027, 5026, 5014, 5004, 4980,
    4915, 4909, 4893, 4885, 4832, 4824, 4591, 3706, 5092, 4986, 4965, 4920,
    4917, 4858, 4847, 4790, 4770, 4318, 4126, 3961, 3790, 4911, 4881, 4827,
    4795, 4789, 4725, 4675, 4539, 4535, 4458, 4197, 4096, 3484, 3481, 3393,
    3175, 2360, 1852, 5065, 5063, 5055, 5012, 4981, 4952, 4934, 4932, 4786,
    4762, 4640, 4601, 4563, 4388, 3820, 3687, 5052, 5051, 5047, 5039, 5015,
    5005, 4984, 4975, 4974, 4972, 4962, 4913, 4907, 4903, 4833, 4778, 4721,
    4661, 4660, 4655, 4623, 4590, 4548, 4461, 4442, 4347, 4259, 4256, 4166,
    4155, 4109, 4100, 4023, 3998, 3979, 3903, 3568, 5088, 5050, 5020, 4990,
    4982, 4966, 4949, 4947, 4937, 4935, 4906, 4901, 4872, 4865, 4863, 4818,
    4785, 4781, 4776, 4775, 4754, 4696, 4690, 4658, 4607, 4599, 4596, 4530,
    4524, 4451, 4441, 4396, 4340, 4335, 4296, 4267, 4168, 4149, 4097, 4061,
    3989, 3966, 3789, 3775, 3622, 3523, 3515, 3492, 3345, 3235, 3169, 3157,
    3082, 3072, 3032, 3030, 4582, 4595, 4068, 4871, 4514, 4439, 4122, 4948,
    4774, 3923, 3411, 4745, 4195, 4897, 3047, 4185, 4354, 5077, 4042, 2111,
    4311, 5024, 4352, 4678, 5034, 5085, 3646, 4868, 3668, 4211, 2883, 2850,
    2815, 2542, 2492, 2376, 2036, 1920]

L1CP_ins_idx = [ # PRN 1 - 210
     412,  161,    1,  303,  207, 4971, 4496,    5, 4557,  485,  253, 4676,
       1,   66, 4485,  282,  193, 5211,  729, 4848,  982, 5955, 9805,  670,
     464,   29,  429,  394,  616, 9457, 4429, 4771,  365, 9705, 9489, 4193,
    9947,  824,  864,  347,  677, 6544, 6312, 9804,  278, 9461,  444, 4839,
    4144, 9875,  197, 1156, 4674,10035, 4504,    5, 9937,  430,    5,  355,
     909, 1622, 6284, 9429,   77,  932, 5973,  377,10000,  951, 6212,  686,
    9352, 5999, 9912, 9620,  635, 4951, 5453, 4658, 4800,   59,  318,  571,
     565, 9947, 4654,  148, 3929,  293,  178,10142, 9683,  137,  565,   35,
    5949,    2, 5982,  825, 9614, 9790, 5613,  764,  660, 4870, 4950, 4881,
    1151, 9977, 5122,10074, 4832,   77, 4698, 1002, 5549, 9606, 9228,  604,
    4678, 4854, 4122, 9471, 5026,  272, 1027,  317,  691,  509, 9708, 5033,
    9938, 4314,10140, 4790, 9823, 6093,  469, 1215,  799,  756, 9994, 4843,
    5271, 9661, 6255, 5203,  203,10070,   30,  103, 5692,   32, 9826,   76,
      59, 6831,  958, 1471,10070,  553, 5487,   55,  208,  645, 5268, 1873,
     427,  367, 1404, 5652,    5,  368,  451, 9595, 1030, 1324,  692, 9819,
    4520, 9911,  278,  642, 6330, 5508, 1872, 5445,10131,  422, 4918,  787,
    9864, 9753, 9859,  328,    1, 4733, 164,   135,  174,  132,  538,  176,
     198,  595,  574,  321,  596,  491]

L1CD_weil_idx = [ # PRN 1 - 210
    5097, 5110, 5079, 4403, 4121, 5043, 5042, 5104, 4940, 5035, 4372, 5064,
    5084, 5048, 4950, 5019, 5076, 3736, 4993, 5060, 5061, 5096, 4983, 4783,
    4991, 4815, 4443, 4769, 4879, 4894, 4985, 5056, 4921, 5036, 4812, 4838,
    4855, 4904, 4753, 4483, 4942, 4813, 4957, 4618, 4669, 4969, 5031, 5038,
    4740, 4073, 4843, 4979, 4867, 4964, 5025, 4579, 4390, 4763, 4612, 4784,
    3716, 4703, 4851, 4955, 5018, 4642, 4840, 4961, 4263, 5011, 4922, 4317,
    3636, 4884, 5041, 4912, 4504, 4617, 4633, 4566, 4702, 4758, 4860, 3962,
    4882, 4467, 4730, 4910, 4684, 4908, 4759, 4880, 4095, 4971, 4873, 4561,
    4588, 4773, 4997, 4583, 4900, 4574, 4629, 4676, 4181, 5057, 4944, 4401,
    4586, 4699, 3676, 4387, 4866, 4926, 4657, 4477, 4359, 4673, 4258, 4447,
    4570, 4486, 4362, 4481, 4322, 4668, 3967, 4374, 4553, 4641, 4215, 3853,
    4787, 4266, 4199, 4545, 4208, 4485, 3714, 4407, 4182, 4203, 3788, 4471,
    4691, 4281, 4410, 3953, 3465, 4801, 4278, 4546, 3779, 4115, 4193, 3372,
    3786, 3491, 3812, 3594, 4028, 3652, 4224, 4334, 3245, 3921, 3840, 3514,
    2922, 4227, 3376, 3560, 4989, 4756, 4624, 4446, 4174, 4551, 3972, 4399,
    4562, 3133, 4157, 5053, 4536, 5067, 3905, 3721, 3787, 4674, 3436, 2673,
    4834, 4456, 4056, 3804, 3672, 4205, 3348, 4152, 3883, 3473, 3669, 3455,
    2318, 2945, 2947, 3220, 4052, 2953]

L1CD_ins_idx = [ # PRN 1 - 210
     181,  359,   72, 1110, 1480, 5034, 4622,    1, 4547,  826, 6284, 4195,
     368,    1, 4796,  523,  151,  713, 9850, 5734,   34, 6142,  190,  644,
     467, 5384,  801,  594, 4450, 9437, 4307, 5906,  378, 9448, 9432, 5849,
    5547, 9546, 9132,  403, 3766,    3,  684, 9711,  333, 6124,10216, 4251,
    9893, 9884, 4627, 4449, 9798,  985, 4272,  126,10024,  434, 1029,  561,
     289,  638, 4353, 9899, 4629,  669, 4378, 4528, 9718, 5485, 6222,  672,
    1275, 6083, 5264,10167, 1085,  194, 5012, 4938, 9356, 5057,  866,    2,
     204, 9808, 4365,  162,  367,  201,   18,  251,10167,   21,  685,   92,
    1057,    3, 5756,   14, 9979, 9569,  515,  753, 1181, 9442,  669, 4834,
     541, 9933, 6683, 4828, 9710,10170, 9629,  260,   86, 5544,  923,  257,
     507, 4572, 4491,  341,  130,   79, 1142,  448,  875,  555, 1272, 5198,
    9529, 4459,10019, 9353, 9780,  375,  503, 4507,  875, 1246,    1, 4534,
       8, 9549, 6240,   22, 5652,10069, 4796, 4980,   27,   90, 9788,  715,
    9720,  301, 5450, 5215,   13, 1147, 4855, 1190, 1267, 1302,    1, 5007,
     549,  368, 6300, 5658, 4302,  851, 4353, 9618, 9652, 1232,  109,10174,
    6178, 1851, 1299,  325,10206, 9968,10191, 5438,10080,  219,  758, 2140,
    9753, 4799,10126,  241, 1245, 1274, 1456, 9967,  235,  512, 1078, 1078,
     953, 5647,  669, 1311, 5827,   15] 

L2CM_R_init_1 = [ # PRN 1 - 63
    0o742417664, 0o756014035, 0o002747144, 0o066265724, 0o601403471,
    0o703232733, 0o124510070, 0o617316361, 0o047541621, 0o733031046,
    0o713512145, 0o024437606, 0o021264003, 0o230655351, 0o001314400,
    0o222021506, 0o540264026, 0o205521705, 0o064022144, 0o120161274,
    0o044023533, 0o724744327, 0o045743577, 0o741201660, 0o700274134,
    0o010247261, 0o713433445, 0o737324162, 0o311627434, 0o710452007,
    0o722462133, 0o050172213, 0o500653703, 0o755077436, 0o136717361,
    0o756675453, 0o435506112, 0o771353753, 0o226107701, 0o022025110,
    0o402466344, 0o752566114, 0o702011164, 0o041216771, 0o047457275,
    0o266333164, 0o713167356, 0o060546335, 0o355173035, 0o617201036,
    0o157465571, 0o767360553, 0o023127030, 0o431343777, 0o747317317,
    0o045706125, 0o002744276, 0o060036467, 0o217744147, 0o603340174,
    0o326616775, 0o063240065, 0o111460621]

L2CM_R_init_2 = [ # PRN 159 - 210
    0o604055104, 0o157065232, 0o013305707, 0o603552017, 0o230461355,
    0o603653437, 0o652346475, 0o743107103, 0o401521277, 0o167335110,
    0o014013575, 0o362051132, 0o617753265, 0o216363634, 0o755561123,
    0o365304033, 0o625025543, 0o054420334, 0o415473671, 0o662364360,
    0o373446602, 0o417564100, 0o000526452, 0o226631300, 0o113752074,
    0o706134401, 0o041352546, 0o664630154, 0o276524255, 0o714720530,
    0o714051771, 0o044526647, 0o207164322, 0o262120161, 0o204244652,
    0o202133131, 0o714351204, 0o657127260, 0o130567507, 0o670517677,
    0o607275514, 0o045413633, 0o212645405, 0o613700455, 0o706202440,
    0o705056276, 0o020373522, 0o746013617, 0o132720621, 0o434015513,
    0o566721727, 0o140633660]
        
L5I_XB_adv = [ # PRN 1 - 210
     266,  365,  804, 1138, 1509, 1559, 1756, 2084, 2170, 2303, 2527, 2687,
    2930, 3471, 3940, 4132, 4332, 4924, 5343, 5443, 5641, 5816, 5898, 5918,
    5955, 6243, 6345, 6477, 6518, 6875, 7168, 7187, 7329, 7577, 7720, 7777,
    8057, 5358, 3550, 3412,  819, 4608, 3698,  962, 3001, 4441, 4937, 3717,
    4730, 7291, 2279, 7613, 5723, 7030, 1475, 2593, 2904, 2056, 2757, 3756,
    6205, 5053, 6437, 7789, 2311, 7432, 5155, 1593, 5841, 5014, 1545, 3016,
    4875, 2119,  229, 7634, 1406, 4506, 1819, 7580, 5446, 6053, 7958, 5267,
    2956, 3544, 1277, 2996, 1758, 3360, 2718, 3754, 7440, 2781, 6756, 7314,
     208, 5252,  696,  527, 1399, 5879, 6868,  217, 7681, 3788, 1337, 2424,
    4243, 5686, 1955, 4791,  492, 1518, 6566, 5349,  506,  113, 1953, 2797,
     934, 3023, 3632, 1330, 4909, 4867, 1183, 3990, 6217, 1224, 1733, 2319,
    3928, 2380,  841, 5049, 7027, 1197, 7208, 8000,  152, 6762, 3745, 4723,
    5502, 4796,  123, 8142, 5091, 7875,  330, 5272, 4912,  374, 2045, 6616,
    6321, 7605, 2570, 2419, 1234, 1922, 4317, 5110,  825,  958, 1089, 7813,
    6058, 7703, 6702, 1714, 6371, 2281, 1986, 6282, 3201, 3760, 1056, 6233,
    1150, 2823, 6250,  645, 2401, 1639, 2946, 7091,  923, 7045, 6493, 1706,
    5836,  926, 6086,  950, 5905, 3240, 6675, 3197, 1555, 3589, 4555, 5671,
    6948, 4664, 2086, 5950, 5521, 1515]

L5Q_XB_adv = [ # PRN 1 - 210
    1701,  323, 5292, 2020, 5429, 7136, 1041, 5947, 4315,  148,  535, 1939,
    5206, 5910, 3595, 5135, 6082, 6990, 3546, 1523, 4548, 4484, 1893, 3961,
    7106, 5299, 4660,  276, 4389, 3783, 1591, 1601,  749, 1387, 1661, 3210,
     708, 4226, 5604, 6375, 3056, 1772, 3662, 4401, 5218, 2838, 6913, 1685,
    1194, 6963, 5001, 6694,  991, 7489, 2441,  639, 2097, 2498, 6470, 2399,
     242, 3768, 1186, 5246, 4259, 5907, 3870, 3262, 7387, 3069, 2999, 7993,
    7849, 4157, 5031, 5986, 4833, 5739, 7846,  898, 2022, 7446, 6404,  155,
    7862, 7795, 6121, 4840, 6585,  429, 6020,  200, 1664, 1499, 7298, 1305,
    7323, 7544, 4438, 2485, 3387, 7319, 1853, 5781, 1874, 7555, 2132, 6441,
    6722, 1192, 2588, 2188,  297, 1540, 4138, 5231, 4789,  659,  871, 6837,
    1393, 7383,  611, 4920, 5416, 1611, 2474,  118, 1382, 1092, 7950, 7223,
    1769, 4721, 1252, 5147, 2165, 7897, 4054, 3498, 6571, 2858, 8126, 7017,
    1901,  181, 1114, 5195, 7479, 4186, 3904, 7128, 1396, 4513, 5967, 2580,
    2575, 7961, 2598, 4508, 2090, 3685, 7748,  684,  913, 5558, 2894, 5858,
    6432, 3813, 3573, 7523, 5280, 3376, 7424, 2918, 5793, 1747, 7079, 2921,
    2490, 4119, 3373,  977,  681, 4273, 5419, 5626, 1266, 5804, 2414, 6444,
    4757,  427, 5452, 5182, 6606, 6531, 4268, 3115, 6835,  862, 4856, 2765,
      37, 1943, 7977, 2512, 4451, 4071]

L6D_R_init = [ # PRN 193 - 201
    0o00255021, 0o00327455, 0o00531421, 0o00615350, 0o00635477, 0o00000000,
    0o01715254, 0o01741247, 0o02322713]

L6E_R_init = [ # PRN 203 - 211
    0o01142153, 0o01723711, 0o03672765, 0o00030404, 0o00000546, 0o00000000,
    0o03642512, 0o00255043, 0o02020075]

E5AI_X2_init = [ # PRN 1 - 50
    0o30305, 0o14234, 0o27213, 0o20577, 0o23312, 0o33463, 0o15614, 0o12537,
    0o01527, 0o30236, 0o27344, 0o07272, 0o36377, 0o17046, 0o06434, 0o15405,
    0o24252, 0o11631, 0o24776, 0o00630, 0o11560, 0o17272, 0o27445, 0o31702,
    0o13012, 0o14401, 0o34727, 0o22627, 0o30623, 0o27256, 0o01520, 0o14211,
    0o31465, 0o22164, 0o33516, 0o02737, 0o21316, 0o35425, 0o35633, 0o24655,
    0o14054, 0o27027, 0o06604, 0o31455, 0o34465, 0o25273, 0o20763, 0o31721,
    0o17312, 0o13277]

E5AQ_X2_init = [ # PRN 1 - 50
    0o25652, 0o05142, 0o24723, 0o31751, 0o27366, 0o24660, 0o33655, 0o27450,
    0o07626, 0o01705, 0o12717, 0o32122, 0o16075, 0o16644, 0o37556, 0o02477,
    0o02265, 0o06430, 0o25046, 0o12735, 0o04262, 0o11230, 0o00037, 0o06137,
    0o04312, 0o20606, 0o11162, 0o22252, 0o30533, 0o24614, 0o07767, 0o32705,
    0o05052, 0o27553, 0o03711, 0o02041, 0o34775, 0o05274, 0o37356, 0o16205,
    0o36270, 0o06600, 0o26773, 0o17375, 0o35267, 0o36255, 0o12044, 0o26442,
    0o21621, 0o25411]

E5BI_X2_init = [ # PRN 1 - 50
    0o07220, 0o26047, 0o00252, 0o17166, 0o14161, 0o02540, 0o01537, 0o26023,
    0o01725, 0o20637, 0o02364, 0o27731, 0o30640, 0o34174, 0o06464, 0o07676,
    0o32231, 0o10353, 0o00755, 0o26077, 0o11644, 0o11537, 0o35115, 0o20452,
    0o34645, 0o25664, 0o21403, 0o32253, 0o02337, 0o30777, 0o27122, 0o22377,
    0o36175, 0o33075, 0o33151, 0o13134, 0o07433, 0o10216, 0o35466, 0o02533,
    0o05351, 0o30121, 0o14010, 0o32576, 0o30326, 0o37433, 0o26022, 0o35770,
    0o06670, 0o12017]

E5BQ_X2_init = [ # PRN 1 - 50
    0o03331, 0o06143, 0o25322, 0o23371, 0o00413, 0o36235, 0o17750, 0o04745,
    0o13005, 0o37140, 0o30155, 0o20237, 0o03461, 0o31662, 0o27146, 0o05547,
    0o02456, 0o30013, 0o00322, 0o10761, 0o26767, 0o36004, 0o30713, 0o07662,
    0o21610, 0o20134, 0o11262, 0o10706, 0o34143, 0o11051, 0o25460, 0o17665,
    0o32354, 0o21230, 0o20146, 0o11362, 0o37246, 0o16344, 0o15034, 0o25471,
    0o25646, 0o22157, 0o04336, 0o16356, 0o04075, 0o02626, 0o11706, 0o37011,
    0o27041, 0o31024]

# rotate code ------------------------------------------------------------------
def rot_code(code, N):
    N = np.mod(N, len(code))
    return np.hstack([code[N:], code[:N]])

# modulation of code by sub-carrier --------------------------------------------
def mod_code(code, sub_carr):
    ix = np.arange(len(code) * len(sub_carr)) // len(sub_carr)
    return -code[ix] * np.array(sub_carr * len(code), dtype='int8')

# read code HEX strings --------------------------------------------------------
def read_code_hex(str, N):
    code = np.zeros(N, dtype='int8')
    for i in range(N):
        code[i] = 1 if (int(str[i // 4], 16) >> (3 - i % 4)) & 1 else -1
    return code

# reverse bits in shift register -----------------------------------------------
def rev_reg(R, N):
    RR = 0
    for i in range(N):
        RR = (RR << 1) | ((R >> i) & 1)
    return RR

# exculsive-or of all bits in shift register -----------------------------------
def xor_reg(R):
    return bin(R).count('1') % 2

# shift LFSR (linear feedback shift register) ----------------------------------
def LFSR(R, N, tap):
    return (xor_reg(R & tap) << (N - 1)) | (R >> 1)

# generate L1C/A G1 code -------------------------------------------------------
def gen_code_L1CA_G1(N):
    code = np.zeros(N, dtype='int8')
    R = 0b1111111111
    for i in range(N):
        code[i] = 1 if R & 1 else -1
        R = LFSR(R, 10, 0b0010000001)
    return code

# generate L1C/A G2 code -------------------------------------------------------
def gen_code_L1CA_G2(N):
    code = np.zeros(N, dtype='int8')
    R = 0b1111111111
    for i in range(N):
        code[i] = 1 if R & 1 else -1
        R = LFSR(R, 10, 0b0110010111)
    return code

# generate L1C/A code ([1]) ----------------------------------------------------
def gen_code_L1CA(prn):
    if prn < 1 or prn > 210:
        return [], 0.0, 0.0
    
    N, T = 1023, 1e-3 # code length (chip), cycle (s)
    
    if prn not in L1CA:
        global L1CA_G1, L1CA_G2
        if len(L1CA_G1) == 0:
            L1CA_G1 = gen_code_L1CA_G1(N)
            L1CA_G2 = gen_code_L1CA_G2(N)
        L1CA[prn] = -L1CA_G1 * rot_code(L1CA_G2, -L1CA_G2_delay[prn-1])
    return L1CA[prn], T, T / N

# generate L1C/B code ([3]) ----------------------------------------------------
def gen_code_L1CB(prn):
    if prn < 203 or prn > 206:
        return [], 0.0, 0.0
    
    code, T, Tc = gen_code_L1CA(prn)
    return mod_code(code, [1, -1]), T, Tc # BOC(1,1)

# generate Legendre sequence ([7]) ---------------------------------------------
def gen_legendre_seq():
    L = np.full(10223, -1, dtype='int8')
    for i in range(1, 10223):
        L[(i * i) % 10223] = 1
    return L

# Weil-code ([7]) --------------------------------------------------------------
def weil_code(t, w):
    global L_SEQ
    if len(L_SEQ) == 0:
        L_SEQ = gen_legendre_seq()
    return -L_SEQ[t] * L_SEQ[(t + w) % 10223]

# generate L1CP/D code ([7]) ---------------------------------------------------
def gen_code_L1CPD(N, w, p):
    ins_code = [-1, 1, 1, -1, 1, -1, -1]
    code = np.zeros(N, dtype='int8')
    for t in range(N):
        if t <= p - 2:
            code[t] = weil_code(t, w)
        elif t <= p + 5:
            code[t] = ins_code[t - p + 1]
        else:
            code[t] = weil_code(t - 7, w)
    return code

# generate L1CP code ([7]) -----------------------------------------------------
def gen_code_L1CP(prn):
    if prn < 1 or prn > 210:
        return [], 0.0, 0.0
    
    N, T = 10230, 10e-3
    
    if prn not in L1CP:
        code = gen_code_L1CPD(N, L1CP_weil_idx[prn-1], L1CP_ins_idx[prn-1])
        L1CP[prn] = mod_code(code, [1, -1]) # BOC(1,1) instead of TMBOC(6,1,4/33)
    return L1CP[prn], T, T / N

# generate L1CD code ([7]) -----------------------------------------------------
def gen_code_L1CD(prn):
    if prn < 1 or prn > 210:
        return [], 0.0, 0.0
    
    N, T = 10230, 10e-3
    
    if prn not in L1CD:
        code = gen_code_L1CPD(N, L1CD_weil_idx[prn-1], L1CD_ins_idx[prn-1])
        L1CD[prn] = mod_code(code, [1, -1]) # BOC(1,1)
    return L1CD[prn], T, T / N

# generate L2CM code ([1]) -----------------------------------------------------
def gen_code_L2CM(prn):
    if (prn < 1 or prn > 63) and (prn < 159 or prn > 210):
        return [], 0.0, 0.0
    
    N, T = 10230, 20e-3
    
    if prn not in L2CM:
        code = np.zeros(N, dtype='int8')
        R = L2CM_R_init_1[prn-1] if prn <= 63 else L2CM_R_init_2[prn-159]
        for i in range(N):
            code[i] = 1 if R & 1 else -1
            R = (R >> 1) ^ (0b100100101001001010100111100 * (R & 1))
        L2CM[prn] = mod_code(code, [1, 0]) # TDM
    return L2CM[prn], T, T / N

# generate L5 XA code ----------------------------------------------------------
def gen_code_L5_XA(N):
    code = np.zeros(N, dtype='int8')
    R = 0b1111111111111
    for i in range(N):
        code[i] = 1 if R & 1 else -1
        if i == 8189:
            R = 0b1111111111111
        else:
            R = LFSR(R, 13, 0b0000000011011)
    return code;

# generate L5 XB code ----------------------------------------------------------
def gen_code_L5_XB(N):
    code = np.zeros(N, dtype='int8')
    R = 0b1111111111111
    for i in range(N):
        code[i] = 1 if R & 1 else -1
        R = LFSR(R, 13, 0b1011011100011)
    return code;

# generate L5I code ([2]) ------------------------------------------------------
def gen_code_L5I(prn):
    if prn < 1 and prn > 210:
        return [], 0.0, 0.0
    
    N, T = 10230, 1e-3
    
    if prn not in L5I:
        global L5_XA, L5_XB
        if len(L5_XA) == 0:
            L5_XA = gen_code_L5_XA(N)
            L5_XB = gen_code_L5_XB(N)
        L5I[prn] = -L5_XA * rot_code(L5_XB, L5I_XB_adv[prn-1])
    return L5I[prn], T, T / N

# generate L5Q code ([2]) ------------------------------------------------------
def gen_code_L5Q(prn):
    if prn < 1 and prn > 210:
        return [], 0.0, 0.0
    
    N, T = 10230, 1e-3

    if prn not in L5Q:
        global L5_XA, L5_XB
        if len(L5_XA) == 0:
            L5_XA = gen_code_L5_XA(N)
            L5_XB = gen_code_L5_XB(N)
        L5Q[prn] = -L5_XA * rot_code(L5_XB, L5Q_XB_adv[prn-1])
    return L5Q[prn], T, T / N

# generate L6 code -------------------------------------------------------------
def gen_code_L6(N, R_init):
    code = np.zeros(N, dtype='int8')
    R1 = 0b1111111111
    R2 = rev_reg(R_init, 20)
    for i in range(N):
        code[i] = 1 if (R1 ^ R2) & 1 else -1
        R1 = LFSR(R1, 10, 0b0011110011)
        R2 = LFSR(R2, 20, 0b00000000000001010011)
    return code

# generate L6D code ([4]) ------------------------------------------------------
def gen_code_L6D(prn):
    if prn < 193 or prn > 201:
        return [], 0.0, 0.0
    
    N, T = 10230, 4e-3
    
    if prn not in L6D:
        code = gen_code_L6(N, L6D_R_init[prn-193])
        L6D[prn] = mod_code(code, [1, 0]) # TDM
    return L6D[prn], T, T / N

# generate L6E code ([4]) ------------------------------------------------------
def gen_code_L6E(prn):
    if prn < 203 or prn > 211:
        return [], 0.0, 0.0
    
    N, T = 10230, 4e-3
    
    if prn not in L6E:
        code = gen_code_L6(N, L6E_R_init[prn-203])
        L6E[prn] = mod_code(code, [0, 1]) # TDM
    return L6E[prn], T, T / N

# generate E1B code ([5]) ------------------------------------------------------
def gen_code_E1B(prn):
    if prn < 1 or prn > 50:
        return [], 0.0, 0.0
    
    N, T = 4092, 4e-3 # code length (chip), period (s)
    
    if prn not in E1B:
        code = read_code_hex(sdr_code_gal.E1B[prn-1], N)
        E1B[prn] = mod_code(code, [1, -1]) # BOC(1,1)
    return E1B[prn], T, T / N

# generate E1C code ([5]) ------------------------------------------------------
def gen_code_E1C(prn):
    if prn < 1 or prn > 50:
        return [], 0.0, 0.0
    
    N, T = 4092, 4e-3
    
    if prn not in E1C:
        code = read_code_hex(sdr_code_gal.E1C[prn-1], N)
        E1C[prn] = mod_code(code, [1, -1]) # BOC(1,1)
    return E1C[prn], T, T / N

# generate E5 code X1 ----------------------------------------------------------
def gen_code_E5_X1(N, tap):
    code = np.zeros(N, dtype='int8')
    R = 0b11111111111111
    tap = rev_reg(tap >> 1, 14)
    for i in range(N):
        code[i] = 1 if R & 1 else -1
        R = LFSR(R, 14, tap)
    return code

# generate E5 code X2 ----------------------------------------------------------
def gen_code_E5_X2(N, tap, X2_init):
    code = np.zeros(N, dtype='int8')
    R = rev_reg(X2_init, 14)
    tap = rev_reg(tap >> 1, 14)
    for i in range(N):
        code[i] = 1 if R & 1 else -1
        R = LFSR(R, 14, tap)
    return code

# generate E5AI code ([5]) -----------------------------------------------------
def gen_code_E5AI(prn):
    if prn < 1 or prn > 50:
        return [], 0.0, 0.0

    N, T = 10230, 1e-3
    
    if prn not in E5AI:
        code1 = gen_code_E5_X1(N, 0o40503)
        code2 = gen_code_E5_X2(N, 0o50661, E5AI_X2_init[prn-1])
        E5AI[prn] = -code1 * code2
    return E5AI[prn], T, T / N

# generate E5AQ code ([5]) -----------------------------------------------------
def gen_code_E5AQ(prn):
    if prn < 1 or prn > 50:
        return [], 0.0, 0.0

    N, T = 10230, 1e-3
    
    if prn not in E5AQ:
        code1 = gen_code_E5_X1(N, 0o40503)
        code2 = gen_code_E5_X2(N, 0o50661, E5AQ_X2_init[prn-1])
        E5AQ[prn] = -code1 * code2
    return E5AQ[prn], T, T / N

# generate E5BI code ([5]) -----------------------------------------------------
def gen_code_E5BI(prn):
    if prn < 1 or prn > 50:
        return [], 0.0, 0.0
    
    N, T = 10230, 1e-3
    
    if prn not in E5BI:
        code1 = gen_code_E5_X1(N, 0o64021)
        code2 = gen_code_E5_X2(N, 0o51445, E5BI_X2_init[prn-1])
        E5BI[prn] = -code1 * code2
    return E5BI[prn], T, T / N

# generate E5BQ code ([5]) -----------------------------------------------------
def gen_code_E5BQ(prn):
    if prn < 1 or prn > 50:
        return [], 0.0, 0.0

    N, T = 10230, 1e-3

    if prn not in E5BQ:
        code1 = gen_code_E5_X1(N, 0o64021)
        code2 = gen_code_E5_X2(N, 0o43143, E5BQ_X2_init[prn-1])
        E5BQ[prn] = -code1 * code2
    return E5BQ[prn], T, T / N

# generate E6B code ([6]) -------------------------------------------------------
def gen_code_E6B(prn):
    if prn < 1 or prn > 50:
        return [], 0.0, 0.0
    
    N, T = 5115, 1e-3
    
    if prn not in E6B:
        E6B[prn] = read_code_hex(sdr_code_gal.E6B[prn-1], N)
    return E6B[prn], T, T / N

# generate E6C code ([6]) -------------------------------------------------------
def gen_code_E6C(prn):
    if prn < 1 or prn > 50:
        return [], 0.0, 0.0
    
    N, T = 5115, 1e-3
    
    if prn not in E6C:
        E6C[prn] = read_code_hex(sdr_code_gal.E6C[prn-1], N)
    return E6C[prn], T, T / N

# generate code ----------------------------------------------------------------
def gen_code(sig, prn):
    sig = sig.upper()
    if sig == 'L1CA':
        return gen_code_L1CA(prn)
    elif sig == 'L1CB':
        return gen_code_L1CB(prn)
    elif sig == 'L1CP':
        return gen_code_L1CP(prn)
    elif sig == 'L1CD':
        return gen_code_L1CD(prn)
    elif sig == 'L2CM':
        return gen_code_L2CM(prn)
    elif sig == 'L5I':
        return gen_code_L5I(prn)
    elif sig == 'L5Q':
        return gen_code_L5Q(prn)
    elif sig == 'L6D':
        return gen_code_L6D(prn)
    elif sig == 'L6E':
        return gen_code_L6E(prn)
    elif sig == 'E1B':
        return gen_code_E1B(prn)
    elif sig == 'E1C':
        return gen_code_E1C(prn)
    elif sig == 'E5AI':
        return gen_code_E5AI(prn)
    elif sig == 'E5AQ':
        return gen_code_E5AQ(prn)
    elif sig == 'E5BI':
        return gen_code_E5BI(prn)
    elif sig == 'E5BQ':
        return gen_code_E5BQ(prn)
    elif sig == 'E6B':
        return gen_code_E6B(prn)
    elif sig == 'E6C':
        return gen_code_E6C(prn)
    else:
        return [], 0.0, 0.0 # code, code period (s), chip period (s)

# code cycle (s) ---------------------------------------------------------------
def cyc_code(sig):
    sig = sig.upper()
    if sig == 'L1CA' or sig == 'L1CB' or sig == 'L5I'  or sig == 'L5Q'  or \
       sig == 'E5AI' or sig == 'E5AQ' or sig == 'E5BI' or sig == 'E5BQ' or \
       sig == 'E6B'  or sig == 'E6C':
        return 1e-3
    elif sig == 'L6D' or sig == 'L6E' or sig == 'E1B' or sig == 'E1C':
        return 4e-3
    elif sig == 'L1CP' or sig == 'L1CD':
        return 10e-3
    elif sig == 'L2CM':
        return 20e-3
    else:
        return 0.0

# resample code ----------------------------------------------------------------
def res_code(code, T, toff, fs, N, zero_pad=False):
    ix = (len(code) / T * (toff + np.arange(N) / fs)).astype('int')
    code = np.array(code[ix % len(code)], dtype='complex64')
    if zero_pad: # zero-padding
        code = np.hstack([code, np.zeros(N, dtype='complex64')])
    return code

